# -*- mode: python-ts; -*-
# Data Loading and Saving Data
import pandas as pd
import numpy as np


s = pd.Series([1, 3, 5, np.nan, 6, 8])
print(s)

df = pd.DataFrame({'col1': [44, 2], 'col2': [3, 4]})
df.index = ['row1', 'row2']
print(df.loc['row1', 'col1'])
print(df)
print(df.iloc[0:2, 1])

# preprocessing
df = pd.DataFrame({
    'A': [1, 2, np.nan, 4, 5],
    'B': [6, np.nan, 8, 9, 10],
    'C': [11, 12, 13, 14, np.nan]
    })

print('\nOriginal Dataframe: ')
print(df)
print('\nMissing values:')
print(df.isna().sum())
df_fillna = df.fillna(0)
print('\nDataframe after filling values with 0:')
print(df_fillna)
df_dropna = df.dropna()
print('\nDataframe after dropping rows with missing values:')
print(df_dropna)
df_dropna = df.dropna(axis=1)
print('\nDataframe after dropping columns with missing values:')
print(df_dropna)

# merging
df1 = pd.DataFrame({
    'A': ['A0', 'A1', 'A2', 'A3'],
    'B': ['B0', 'B1', 'B2', 'B3'],
    'key': ['K0', 'K1', 'K2', 'K3'],
    })

df2 = pd.DataFrame({
    'C': ['C0', 'C1', 'C2', 'C3'],
    'D': ['D0', 'D1', 'D2', 'D3'],
    'key': ['K0', 'K1', 'K2', 'K4'],
    })

print('df1:')
print(df1)
print('\ndf2:')
print(df2)

concat = pd.concat([df1, df2], axis=0)
print('\nconcat:')
print(concat)

merge = pd.merge(df1, df2, on='key', how='inner')
print('\nInner Join:')
print(merge)

merge = pd.merge(df1, df2, on='key', how='left')
print('\nLeft Join:')
print(merge)

merge = pd.merge(df1, df2, on='key', how='right')
print('\nRight Join:')
print(merge)

merge = pd.merge(df1, df2, on='key', how='outer')
print('\nOuter Join:')
print(merge)

# advanced??
df = pd.DataFrame({
    'A': ['foo', 'bar', 'baz', 'foo', 'bar', 'baz'],
    'B': ['one', 'one', 'two', 'two', 'one', 'one'],
    'C': [1, 2, 3, 4, 5, 6],
    'D': [10, 20, 30, 40, 50, 60]
    })

df['A_encoded'] = df['A'].astype('category').cat.codes
df['B_encoded'] = df['B'].astype('category').cat.codes

print(df)
print(df['A_encoded'])
print(df['B_encoded'])

df['C_norm'] = (df['C'] - df['C'].min()) / (df['C'].max() - df['C'].min())
df['D_norm'] = (df['D'] - df['D'].min()) / (df['D'].max() - df['D'].min())

print(df['C_norm'])
print(df['D_norm'])

grouped_df = df.groupby(['A', 'B']).agg({'C_norm': 'mean', 'D_norm': 'sum'}).reset_index()

print(grouped_df)
