# -*- mode:python-ts; -*-
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA


data = np.random.rand(100, 10)
reduced_data = PCA(n_components=2).fit_transform(data)
inertia_values = []
possible_clusters = range(1, 11)

for k in possible_clusters:
    kmeans = KMeans(init='k-means++', n_clusters=k, n_init=4)
    kmeans.fit(reduced_data)
    inertia_values.append(kmeans.inertia_)

optimal_clusters = 3
kmeans = KMeans(init='k-means++', n_clusters=optimal_clusters, n_init=4)
kmeans.fit(reduced_data)
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.plot(possible_clusters, inertia_values, marker='o')
plt.title('Elbow Method for Optimal K')
plt.xlabel('number of Clusters')
plt.ylabel('Inertia (Sum of Squared Distances)')


plt.show()
